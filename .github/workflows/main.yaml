name: Production Workflow

on:
  push:
    branches:
      - main

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Build Image
        run: docker build -t aditnugroho/geminicare:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: docker push aditnugroho/geminicare:latest

  deploy-to-server:
    name: Deploy to Server
    runs-on: ubuntu-22.04
    needs: build-image
    steps:
      - name: Configure SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/ecs-user/geminicare
            
            touch .env && 
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env &&
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env &&
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env &&
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env &&
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env &&
            echo "DB_SSL_MODE=${{ secrets.DB_SSL_MODE }}" >> .env &&
            echo "DB_TIME_ZONE=${{ secrets.DB_TIME_ZONE }}" >> .env &&
            echo "PORT=${{ secrets.PORT }}" >> .env &&
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env &&
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env &&
            echo "GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}" >> .env &&
            echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> .env &&
            echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env &&
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env &&
            
            docker compose pull
            docker compose down
            docker compose up -d
            docker image prune -f
            
            
